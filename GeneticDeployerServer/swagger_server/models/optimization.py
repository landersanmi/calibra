# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Optimization(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pipeline: str=None, computing_infra: str=None, network_infra: str=None, population_size: int=None, generations_check: bool=None, max_generations: int=None, time_check: bool=None, max_time: int=None):  # noqa: E501
        """Optimization - a model defined in Swagger

        :param pipeline: The pipeline of this Optimization.  # noqa: E501
        :type pipeline: str
        :param computing_infra: The computing_infra of this Optimization.  # noqa: E501
        :type computing_infra: str
        :param network_infra: The network_infra of this Optimization.  # noqa: E501
        :type network_infra: str
        :param population_size: The population_size of this Optimization.  # noqa: E501
        :type population_size: int
        :param generations_check: The generations_check of this Optimization.  # noqa: E501
        :type generations_check: bool
        :param max_generations: The max_generations of this Optimization.  # noqa: E501
        :type max_generations: int
        :param time_check: The time_check of this Optimization.  # noqa: E501
        :type time_check: bool
        :param max_time: The max_time of this Optimization.  # noqa: E501
        :type max_time: int
        """
        self.swagger_types = {
            'pipeline': str,
            'computing_infra': str,
            'network_infra': str,
            'population_size': int,
            'generations_check': bool,
            'max_generations': int,
            'time_check': bool,
            'max_time': int
        }

        self.attribute_map = {
            'pipeline': 'pipeline',
            'computing_infra': 'computing_infra',
            'network_infra': 'network_infra',
            'population_size': 'population_size',
            'generations_check': 'generations_check',
            'max_generations': 'max_generations',
            'time_check': 'time_check',
            'max_time': 'max_time'
        }
        self._pipeline = pipeline
        self._computing_infra = computing_infra
        self._network_infra = network_infra
        self._population_size = population_size
        self._generations_check = generations_check
        self._max_generations = max_generations
        self._time_check = time_check
        self._max_time = max_time

    @classmethod
    def from_dict(cls, dikt) -> 'Optimization':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The optimization of this Optimization.  # noqa: E501
        :rtype: Optimization
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pipeline(self) -> str:
        """Gets the pipeline of this Optimization.

        Analytical pipeline definition YAML file  # noqa: E501

        :return: The pipeline of this Optimization.
        :rtype: str
        """
        return self._pipeline

    @pipeline.setter
    def pipeline(self, pipeline: str):
        """Sets the pipeline of this Optimization.

        Analytical pipeline definition YAML file  # noqa: E501

        :param pipeline: The pipeline of this Optimization.
        :type pipeline: str
        """

        self._pipeline = pipeline

    @property
    def computing_infra(self) -> str:
        """Gets the computing_infra of this Optimization.

        Computing infrastructure definition CSV file  # noqa: E501

        :return: The computing_infra of this Optimization.
        :rtype: str
        """
        return self._computing_infra

    @computing_infra.setter
    def computing_infra(self, computing_infra: str):
        """Sets the computing_infra of this Optimization.

        Computing infrastructure definition CSV file  # noqa: E501

        :param computing_infra: The computing_infra of this Optimization.
        :type computing_infra: str
        """

        self._computing_infra = computing_infra

    @property
    def network_infra(self) -> str:
        """Gets the network_infra of this Optimization.

        Network infrastructure definition CSV file  # noqa: E501

        :return: The network_infra of this Optimization.
        :rtype: str
        """
        return self._network_infra

    @network_infra.setter
    def network_infra(self, network_infra: str):
        """Sets the network_infra of this Optimization.

        Network infrastructure definition CSV file  # noqa: E501

        :param network_infra: The network_infra of this Optimization.
        :type network_infra: str
        """

        self._network_infra = network_infra

    @property
    def population_size(self) -> int:
        """Gets the population_size of this Optimization.

        Number of selected individuals in the population  # noqa: E501

        :return: The population_size of this Optimization.
        :rtype: int
        """
        return self._population_size

    @population_size.setter
    def population_size(self, population_size: int):
        """Sets the population_size of this Optimization.

        Number of selected individuals in the population  # noqa: E501

        :param population_size: The population_size of this Optimization.
        :type population_size: int
        """

        self._population_size = population_size

    @property
    def generations_check(self) -> bool:
        """Gets the generations_check of this Optimization.

        Indicates to optimizer if stop by generations  # noqa: E501

        :return: The generations_check of this Optimization.
        :rtype: bool
        """
        return self._generations_check

    @generations_check.setter
    def generations_check(self, generations_check: bool):
        """Sets the generations_check of this Optimization.

        Indicates to optimizer if stop by generations  # noqa: E501

        :param generations_check: The generations_check of this Optimization.
        :type generations_check: bool
        """

        self._generations_check = generations_check

    @property
    def max_generations(self) -> int:
        """Gets the max_generations of this Optimization.

        Number of generations to optimize after meting constraints  # noqa: E501

        :return: The max_generations of this Optimization.
        :rtype: int
        """
        return self._max_generations

    @max_generations.setter
    def max_generations(self, max_generations: int):
        """Sets the max_generations of this Optimization.

        Number of generations to optimize after meting constraints  # noqa: E501

        :param max_generations: The max_generations of this Optimization.
        :type max_generations: int
        """

        self._max_generations = max_generations

    @property
    def time_check(self) -> bool:
        """Gets the time_check of this Optimization.

        Indicates to optimizer if stop by time  # noqa: E501

        :return: The time_check of this Optimization.
        :rtype: bool
        """
        return self._time_check

    @time_check.setter
    def time_check(self, time_check: bool):
        """Sets the time_check of this Optimization.

        Indicates to optimizer if stop by time  # noqa: E501

        :param time_check: The time_check of this Optimization.
        :type time_check: bool
        """

        self._time_check = time_check

    @property
    def max_time(self) -> int:
        """Gets the max_time of this Optimization.

        Number of seconds to optimize after meting constraints  # noqa: E501

        :return: The max_time of this Optimization.
        :rtype: int
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time: int):
        """Sets the max_time of this Optimization.

        Number of seconds to optimize after meting constraints  # noqa: E501

        :param max_time: The max_time of this Optimization.
        :type max_time: int
        """

        self._max_time = max_time
