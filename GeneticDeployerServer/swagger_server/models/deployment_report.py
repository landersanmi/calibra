# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class DeploymentReport(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, pareto_front_size: int=None, total_time: int=None, time_to_met_constraints: int=None, num_models: int=None, num_computing_devices: int=None, num_net_devices: int=None, report_date: str=None, best_solution: object=None, best_sol_performance_fitness: object=None, best_sol_cost_fitness: object=None, best_sol_net_cost_fitness: object=None, best_sol_net_fail_prob_fitness: object=None, population_size: int=None, max_generations: int=None, max_time: int=None):  # noqa: E501
        """DeploymentReport - a model defined in Swagger

        :param pareto_front_size: The pareto_front_size of this DeploymentReport.  # noqa: E501
        :type pareto_front_size: int
        :param total_time: The total_time of this DeploymentReport.  # noqa: E501
        :type total_time: int
        :param time_to_met_constraints: The time_to_met_constraints of this DeploymentReport.  # noqa: E501
        :type time_to_met_constraints: int
        :param num_models: The num_models of this DeploymentReport.  # noqa: E501
        :type num_models: int
        :param num_computing_devices: The num_computing_devices of this DeploymentReport.  # noqa: E501
        :type num_computing_devices: int
        :param num_net_devices: The num_net_devices of this DeploymentReport.  # noqa: E501
        :type num_net_devices: int
        :param report_date: The report_date of this DeploymentReport.  # noqa: E501
        :type report_date: str
        :param best_solution: The best_solution of this DeploymentReport.  # noqa: E501
        :type best_solution: object
        :param best_sol_performance_fitness: The best_sol_performance_fitness of this DeploymentReport.  # noqa: E501
        :type best_sol_performance_fitness: object
        :param best_sol_cost_fitness: The best_sol_cost_fitness of this DeploymentReport.  # noqa: E501
        :type best_sol_cost_fitness: object
        :param best_sol_net_cost_fitness: The best_sol_net_cost_fitness of this DeploymentReport.  # noqa: E501
        :type best_sol_net_cost_fitness: object
        :param best_sol_net_fail_prob_fitness: The best_sol_net_fail_prob_fitness of this DeploymentReport.  # noqa: E501
        :type best_sol_net_fail_prob_fitness: object
        :param population_size: The population_size of this DeploymentReport.  # noqa: E501
        :type population_size: int
        :param max_generations: The max_generations of this DeploymentReport.  # noqa: E501
        :type max_generations: int
        :param max_time: The max_time of this DeploymentReport.  # noqa: E501
        :type max_time: int
        """
        self.swagger_types = {
            'pareto_front_size': int,
            'total_time': int,
            'time_to_met_constraints': int,
            'num_models': int,
            'num_computing_devices': int,
            'num_net_devices': int,
            'report_date': str,
            'best_solution': object,
            'best_sol_performance_fitness': object,
            'best_sol_cost_fitness': object,
            'best_sol_net_cost_fitness': object,
            'best_sol_net_fail_prob_fitness': object,
            'population_size': int,
            'max_generations': int,
            'max_time': int
        }

        self.attribute_map = {
            'pareto_front_size': 'pareto_front_size',
            'total_time': 'total_time',
            'time_to_met_constraints': 'time_to_met_constraints',
            'num_models': 'num_models',
            'num_computing_devices': 'num_computing_devices',
            'num_net_devices': 'num_net_devices',
            'report_date': 'report_date',
            'best_solution': 'best_solution',
            'best_sol_performance_fitness': 'best_sol_performance_fitness',
            'best_sol_cost_fitness': 'best_sol_cost_fitness',
            'best_sol_net_cost_fitness': 'best_sol_net_cost_fitness',
            'best_sol_net_fail_prob_fitness': 'best_sol_net_fail_prob_fitness',
            'population_size': 'population_size',
            'max_generations': 'max_generations',
            'max_time': 'max_time'
        }
        self._pareto_front_size = pareto_front_size
        self._total_time = total_time
        self._time_to_met_constraints = time_to_met_constraints
        self._num_models = num_models
        self._num_computing_devices = num_computing_devices
        self._num_net_devices = num_net_devices
        self._report_date = report_date
        self._best_solution = best_solution
        self._best_sol_performance_fitness = best_sol_performance_fitness
        self._best_sol_cost_fitness = best_sol_cost_fitness
        self._best_sol_net_cost_fitness = best_sol_net_cost_fitness
        self._best_sol_net_fail_prob_fitness = best_sol_net_fail_prob_fitness
        self._population_size = population_size
        self._max_generations = max_generations
        self._max_time = max_time

    @classmethod
    def from_dict(cls, dikt) -> 'DeploymentReport':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The deployment_report of this DeploymentReport.  # noqa: E501
        :rtype: DeploymentReport
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pareto_front_size(self) -> int:
        """Gets the pareto_front_size of this DeploymentReport.

        Number of solutions that are in the Pareto front  # noqa: E501

        :return: The pareto_front_size of this DeploymentReport.
        :rtype: int
        """
        return self._pareto_front_size

    @pareto_front_size.setter
    def pareto_front_size(self, pareto_front_size: int):
        """Sets the pareto_front_size of this DeploymentReport.

        Number of solutions that are in the Pareto front  # noqa: E501

        :param pareto_front_size: The pareto_front_size of this DeploymentReport.
        :type pareto_front_size: int
        """

        self._pareto_front_size = pareto_front_size

    @property
    def total_time(self) -> int:
        """Gets the total_time of this DeploymentReport.

        Total seconds of optimization execution  # noqa: E501

        :return: The total_time of this DeploymentReport.
        :rtype: int
        """
        return self._total_time

    @total_time.setter
    def total_time(self, total_time: int):
        """Sets the total_time of this DeploymentReport.

        Total seconds of optimization execution  # noqa: E501

        :param total_time: The total_time of this DeploymentReport.
        :type total_time: int
        """

        self._total_time = total_time

    @property
    def time_to_met_constraints(self) -> int:
        """Gets the time_to_met_constraints of this DeploymentReport.

        Seconds took by optimization process execution for achieving the satisfaction of all defined constraints  # noqa: E501

        :return: The time_to_met_constraints of this DeploymentReport.
        :rtype: int
        """
        return self._time_to_met_constraints

    @time_to_met_constraints.setter
    def time_to_met_constraints(self, time_to_met_constraints: int):
        """Sets the time_to_met_constraints of this DeploymentReport.

        Seconds took by optimization process execution for achieving the satisfaction of all defined constraints  # noqa: E501

        :param time_to_met_constraints: The time_to_met_constraints of this DeploymentReport.
        :type time_to_met_constraints: int
        """

        self._time_to_met_constraints = time_to_met_constraints

    @property
    def num_models(self) -> int:
        """Gets the num_models of this DeploymentReport.

        Number of Analytical Models that compose the analytical pipeline file  # noqa: E501

        :return: The num_models of this DeploymentReport.
        :rtype: int
        """
        return self._num_models

    @num_models.setter
    def num_models(self, num_models: int):
        """Sets the num_models of this DeploymentReport.

        Number of Analytical Models that compose the analytical pipeline file  # noqa: E501

        :param num_models: The num_models of this DeploymentReport.
        :type num_models: int
        """

        self._num_models = num_models

    @property
    def num_computing_devices(self) -> int:
        """Gets the num_computing_devices of this DeploymentReport.

        Number of Computing Devices that compose the computing infrastructure file  # noqa: E501

        :return: The num_computing_devices of this DeploymentReport.
        :rtype: int
        """
        return self._num_computing_devices

    @num_computing_devices.setter
    def num_computing_devices(self, num_computing_devices: int):
        """Sets the num_computing_devices of this DeploymentReport.

        Number of Computing Devices that compose the computing infrastructure file  # noqa: E501

        :param num_computing_devices: The num_computing_devices of this DeploymentReport.
        :type num_computing_devices: int
        """

        self._num_computing_devices = num_computing_devices

    @property
    def num_net_devices(self) -> int:
        """Gets the num_net_devices of this DeploymentReport.

        Number of Network Devices that compose the network infrastructure file  # noqa: E501

        :return: The num_net_devices of this DeploymentReport.
        :rtype: int
        """
        return self._num_net_devices

    @num_net_devices.setter
    def num_net_devices(self, num_net_devices: int):
        """Sets the num_net_devices of this DeploymentReport.

        Number of Network Devices that compose the network infrastructure file  # noqa: E501

        :param num_net_devices: The num_net_devices of this DeploymentReport.
        :type num_net_devices: int
        """

        self._num_net_devices = num_net_devices

    @property
    def report_date(self) -> str:
        """Gets the report_date of this DeploymentReport.

        Datetime os the report generation  # noqa: E501

        :return: The report_date of this DeploymentReport.
        :rtype: str
        """
        return self._report_date

    @report_date.setter
    def report_date(self, report_date: str):
        """Sets the report_date of this DeploymentReport.

        Datetime os the report generation  # noqa: E501

        :param report_date: The report_date of this DeploymentReport.
        :type report_date: str
        """

        self._report_date = report_date

    @property
    def best_solution(self) -> object:
        """Gets the best_solution of this DeploymentReport.

        Solution with best value for all objectives functions  # noqa: E501

        :return: The best_solution of this DeploymentReport.
        :rtype: object
        """
        return self._best_solution

    @best_solution.setter
    def best_solution(self, best_solution: object):
        """Sets the best_solution of this DeploymentReport.

        Solution with best value for all objectives functions  # noqa: E501

        :param best_solution: The best_solution of this DeploymentReport.
        :type best_solution: object
        """

        self._best_solution = best_solution

    @property
    def best_sol_performance_fitness(self) -> object:
        """Gets the best_sol_performance_fitness of this DeploymentReport.

        Solution with best value for Performance objective function  # noqa: E501

        :return: The best_sol_performance_fitness of this DeploymentReport.
        :rtype: object
        """
        return self._best_sol_performance_fitness

    @best_sol_performance_fitness.setter
    def best_sol_performance_fitness(self, best_sol_performance_fitness: object):
        """Sets the best_sol_performance_fitness of this DeploymentReport.

        Solution with best value for Performance objective function  # noqa: E501

        :param best_sol_performance_fitness: The best_sol_performance_fitness of this DeploymentReport.
        :type best_sol_performance_fitness: object
        """

        self._best_sol_performance_fitness = best_sol_performance_fitness

    @property
    def best_sol_cost_fitness(self) -> object:
        """Gets the best_sol_cost_fitness of this DeploymentReport.

        Solution with best value for Cost objective function  # noqa: E501

        :return: The best_sol_cost_fitness of this DeploymentReport.
        :rtype: object
        """
        return self._best_sol_cost_fitness

    @best_sol_cost_fitness.setter
    def best_sol_cost_fitness(self, best_sol_cost_fitness: object):
        """Sets the best_sol_cost_fitness of this DeploymentReport.

        Solution with best value for Cost objective function  # noqa: E501

        :param best_sol_cost_fitness: The best_sol_cost_fitness of this DeploymentReport.
        :type best_sol_cost_fitness: object
        """

        self._best_sol_cost_fitness = best_sol_cost_fitness

    @property
    def best_sol_net_cost_fitness(self) -> object:
        """Gets the best_sol_net_cost_fitness of this DeploymentReport.

        Solution with best value for Network Cost objective function  # noqa: E501

        :return: The best_sol_net_cost_fitness of this DeploymentReport.
        :rtype: object
        """
        return self._best_sol_net_cost_fitness

    @best_sol_net_cost_fitness.setter
    def best_sol_net_cost_fitness(self, best_sol_net_cost_fitness: object):
        """Sets the best_sol_net_cost_fitness of this DeploymentReport.

        Solution with best value for Network Cost objective function  # noqa: E501

        :param best_sol_net_cost_fitness: The best_sol_net_cost_fitness of this DeploymentReport.
        :type best_sol_net_cost_fitness: object
        """

        self._best_sol_net_cost_fitness = best_sol_net_cost_fitness

    @property
    def best_sol_net_fail_prob_fitness(self) -> object:
        """Gets the best_sol_net_fail_prob_fitness of this DeploymentReport.

        Solution with best value for Network Failure Probability objective function  # noqa: E501

        :return: The best_sol_net_fail_prob_fitness of this DeploymentReport.
        :rtype: object
        """
        return self._best_sol_net_fail_prob_fitness

    @best_sol_net_fail_prob_fitness.setter
    def best_sol_net_fail_prob_fitness(self, best_sol_net_fail_prob_fitness: object):
        """Sets the best_sol_net_fail_prob_fitness of this DeploymentReport.

        Solution with best value for Network Failure Probability objective function  # noqa: E501

        :param best_sol_net_fail_prob_fitness: The best_sol_net_fail_prob_fitness of this DeploymentReport.
        :type best_sol_net_fail_prob_fitness: object
        """

        self._best_sol_net_fail_prob_fitness = best_sol_net_fail_prob_fitness

    @property
    def population_size(self) -> int:
        """Gets the population_size of this DeploymentReport.

        Number of selected individuals in the population  # noqa: E501

        :return: The population_size of this DeploymentReport.
        :rtype: int
        """
        return self._population_size

    @population_size.setter
    def population_size(self, population_size: int):
        """Sets the population_size of this DeploymentReport.

        Number of selected individuals in the population  # noqa: E501

        :param population_size: The population_size of this DeploymentReport.
        :type population_size: int
        """

        self._population_size = population_size

    @property
    def max_generations(self) -> int:
        """Gets the max_generations of this DeploymentReport.

        Number of selected generations to execute the optimization after constraints met  # noqa: E501

        :return: The max_generations of this DeploymentReport.
        :rtype: int
        """
        return self._max_generations

    @max_generations.setter
    def max_generations(self, max_generations: int):
        """Sets the max_generations of this DeploymentReport.

        Number of selected generations to execute the optimization after constraints met  # noqa: E501

        :param max_generations: The max_generations of this DeploymentReport.
        :type max_generations: int
        """

        self._max_generations = max_generations

    @property
    def max_time(self) -> int:
        """Gets the max_time of this DeploymentReport.

        Number of selected seconds to execute the optimization after constraints met  # noqa: E501

        :return: The max_time of this DeploymentReport.
        :rtype: int
        """
        return self._max_time

    @max_time.setter
    def max_time(self, max_time: int):
        """Sets the max_time of this DeploymentReport.

        Number of selected seconds to execute the optimization after constraints met  # noqa: E501

        :param max_time: The max_time of this DeploymentReport.
        :type max_time: int
        """

        self._max_time = max_time
